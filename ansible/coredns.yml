---
## Prerequisites
##
##   You need to set the following environment variables prior to executing ansible-playbook.
##   To retrieve your TSS_TOKEN, login into Secret Server, select your profile icon (top right corner), 
##   select User Preferences.  Click the 'Generate API Token and Copy to Clipboard' link.  Use this value
##   for TSS_TOKEN.
##
##   $ export TSS_BASE_URL=https://epm.library.ucsb.edu
##   $ export TSS_TOKEN=abcdefg12345

- name: "CoreDNS integrated with Route53 - POC"
  hosts: bind_servers
  become: true

  environment:
    http_proxy: http://10.11.100.201:3128
    https_proxy: http://10.11.100.201:3128
  
  vars:
    #ansible_become_password: "{{ ( (lookup('community.general.tss',  3003) | from_json).get('items') | items2dict(key_name='slug', value_name='itemValue'))[ 'password' ] }}"
    #ssid_aws_keys: 3234
    coredns_base_path: "/home/coredns"
    ansible_become_password: "{{ lookup('amazon.aws.aws_secret', 'ANSIBLE_BECOME_PASSWORD', region='us-west-2') }}"
    aws_secret_arns_file_path: ../tf/aws_secret_arns.yml

    coredns_access: arn:aws:secretsmanager:us-west-2:406663345920:secret:service-coredns-AWS_ACCESS_KEY_ID-JJvEZZ
    coredns_secret: arn:aws:secretsmanager:us-west-2:406663345920:secret:service-coredns-AWS_SECRET_ACCESS_KEY-QfC9ey

    zones:
      - zonename: library.ucsb.edu
        hosted_zone_id: "Z0925576K83WAB2RR2FS"
        zone_refresh: "5m"
      - zonename: alexandria.ucsb.edu
        hosted_zone_id: "Z05095443RZ2T3IXXE5VY"
        zone_refresh: "5m"
      - zonename: 87.111.128.in-addr.arpa
        hosted_zone_id: "Z083898338YI6S69P5TIV"
        zone_refresh: "5m"


  tasks:

    - name: "checking for {{ aws_secret_arns_file_path }}"
      ansible.builtin.stat:
        path: "{{ aws_secret_arns_file_path }}"
      register: arns_stat

    - name: "Include terraform generated AWS SecretsManager ARNs"
      include_vars: "{{ aws_secret_arns_file_path }}"
      when: arns_stat.stat.exists

    - name: "Results of stat'ing {{ aws_secret_arns_file_path }}"
      debug:
        msg: "{{ arns_stat }}"

    - ansible.builtin.set_fact:
        #aws_secret_access_key: "{{ ( (lookup('community.general.tss',  ssid_aws_keys) | from_json).get('items') | items2dict(key_name='slug', value_name='itemValue'))[ 'secret-key' ] }}"
        #aws_access_key_id: "{{ ( (lookup('community.general.tss',  ssid_aws_keys) | from_json).get('items') | items2dict(key_name='slug', value_name='itemValue'))[ 'access-key' ] }}"
        aws_access_key_id: "{{ lookup('amazon.aws.aws_secret', 'service-coredns-AWS_ACCESS_KEY_ID', region='us-west-2') }}"
        aws_secret_access_key: "{{ lookup('amazon.aws.aws_secret', 'service-coredns-AWS_SECRET_ACCESS_KEY', region='us-west-2') }}"

      tags: 
        - role:coredns:install
        - role:coredns:install:secrets
        - role:coredns:tss
      delegate_to: 127.0.0.1

    - name: debug aws keys
      debug:
        msg: "aws_access_key_id: {{aws_access_key_id}}"

    - name: debug aws secret keys
      debug:
        msg: "aws_secret_access_key: {{aws_secret_access_key}}"


    - name: create container directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: 0775
        owner: root
        recurse: yes
      tags: 
        - role:coredns:install
        - role:coredns:install:paths
      loop: 
        - "{{ coredns_base_path }}/config"
        - "{{ coredns_base_path }}/data"
      
    - name: create config file
      ansible.builtin.template:
        src: templates/Corefile.j2
        dest: "{{ coredns_base_path }}/config/Corefile"
      tags: 
        - role:coredns:install
        - role:coredns:install:corefile
        - role:coredns:config

    - name: disable systemd-resolved
      ansible.builtin.service:
        name: systemd-resolved
        state: stopped
        enabled: false
      tags: 
        - role:coredns:install
        - role:coredns:install:resolved
    
    - name: restart docker to ensure iptables integration
      ansible.builtin.service:
        name: docker
        state: restarted
      tags: 
        - role:coredns:install
        - role:coredns:install:docker
        - never  
    
    - name: create container
      community.docker.docker_container:
        name: coredns
        recreate: yes
        restart: yes
        state: started
        image: coredns/coredns
        command: -conf /root/Corefile
        ports:
          - "53:53/tcp"
          - "53:53/udp"
        volumes:
          - "{{ coredns_base_path }}/config:/root:rw"
        env:
            AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
            AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
      tags: 
        - role:coredns:install
        - role:coredns:install:container
